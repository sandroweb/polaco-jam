!function(a, b) {
    "use strict";
    function c() {
        e.play();
    }
    var d, e, f, g, h = "mAzE";
    d = function() {
        function c() {
            return x[y];
        }
        function d() {
            w.play();
        }
        function e() {
            s();
        }
        function h() {
            w.onloadeddata = function() {
                var a = new Howl({
                    urls: [ "assets/sounds/capetatech.mp3" ],
                    autoplay: !0,
                    loop: !0,
                    volume: 0,
                    onload: function() {
                        return t = a, e(), b.backgroundSound = t, t;
                    }
                });
            }, a(w).append('<source src="assets/videos/way.mp4" type="video/mp4">');
        }
        function i() {
            clearInterval(u);
        }
        function j() {
            i(), A = 0, y = -1, w.currentTime = 0;
        }
        function k() {
            j(), setTimeout(function() {
                f.restart();
            }, 800);
        }
        function l(a) {
            x = a;
        }
        function m(a) {
            c().direction === a ? f.hide(function() {
                y += 1, y === x.length && i(), d();
            }) : f.addText("[[[ Error - Wrong way ]]]", function(a) {
                return f.addText("Restarting ................ 100%", function(a) {
                    return k(), a;
                }, 2e3), a;
            }, 2e3);
        }
        function n() {
            a(w).addClass("shown");
        }
        function o() {
            var a = c();
            !B && (w.ended === !0 || w.currentTime >= 193) ? (B = !0, t.stop(), clearInterval(u), 
            top && top.document && top.document.body && (top.document.body.className = "")) : a && w.currentTime >= a.time && w.paused === !1 && (w.pause(), 
            f.show(function() {
                f.addText(a.description, function(a) {
                    return a;
                });
            }));
        }
        function p() {
            w.pause(), f.addText("TIME IS OVER...", function() {
                k();
            });
        }
        function q() {
            var a = .6;
            y = 0, g && (w.currentTime = x[x.length - 1].time - 2, y = x.length - 1), d(), u = setInterval(function() {
                z > A ? (A += 1, t.volume(.2 + A * a / z)) : (i(), p());
            }, 1e3);
        }
        function r(a) {
            s = a, w.muted = !1, w.loop = !1, w.ontimeupdate = o, w.onended = k, h();
        }
        var s, t, u, v = a("#way"), w = v.find("video")[0], x = [ {
            time: 15,
            direction: "s",
            description: "<br>It's just the start of the maze. <br>We have only one way to go. <br> Which path your should we take ? <br> Press 's' to go straight "
        }, {
            time: 25,
            direction: "l",
            description: "<br>Right or Left ? What do we do now ?<br> Press 'l' to go left<br> Press 'r' to go right "
        }, {
            time: 45,
            direction: "r",
            description: "<br>Hmmm... A bifurcation. <br> Press 'l' to go left<br> Press 'r' to go right"
        }, {
            time: 65,
            direction: "r",
            description: "<br>I'm hearing some voices here. Hurry up! <br> Press 'l' to go left<br> Press 'r' to go right"
        }, {
            time: 89,
            direction: "l",
            description: "<br>Something is following me... <br> Press 'l' to go left<br> Press 'r' to go right"
        }, {
            time: 107,
            direction: "r",
            description: "<br>I think we are almost there.<br> Press 'l' to go left<br> Press 'r' to go right"
        }, {
            time: 151,
            direction: "s",
            description: "<br>It's getting closer... HELP! <br> Press 'l' to go left<br> Press 's' to go straight<br> Press 'r' to go right"
        }, {
            time: 161,
            direction: "r",
            description: "<br>I can feel it...<br>Press 'l' to go left<br> Press 's' to go straight<br> Press 'r' to go right"
        } ], y = -1, z = 240, A = 0, B = !1;
        return {
            init: r,
            setSteps: l,
            setDirection: m,
            getTotalSteps: function() {
                return x.length;
            },
            getCurrStepIndex: function() {
                return y;
            },
            play: d,
            start: q,
            show: n
        };
    }(), e = function() {
        function b() {
            j.onloadeddata = function() {
                h();
            }, a(j).append('<source src="assets/videos/intro.mp4" type="video/mp4">');
        }
        function c(a) {
            i.fadeOut(300, function() {
                a();
            });
        }
        function d() {
            j.play();
        }
        function e() {
            j.currentTime === j.duration && c(f.init);
        }
        function g(a) {
            h = a, j.muted = !1, j.loop = !1, j.ontimeupdate = e, b();
        }
        var h, i = a("#intro"), j = i.find("video")[0];
        return {
            init: g,
            hide: c,
            play: d
        };
    }(), f = function() {
        function b() {
            return v.is(":visible");
        }
        function c() {
            x.focus();
        }
        function f(a) {
            b() === !1 ? v.fadeIn(300, function() {
                c(), void 0 !== a && a();
            }) : void 0 !== a && a();
        }
        function g(a) {
            v.fadeOut(300, function() {
                a();
            });
        }
        function i() {
            B = !0;
        }
        function j() {
            x.val(""), B = !1;
        }
        function k() {
            w.css({
                "margin-top": -1 * (y.outerHeight() + 20 - v.height())
            });
        }
        function l() {
            return y.find(".line").length - 1;
        }
        function m(a, b) {
            a = a || l(), y.find(".line").eq(a).find(".text-content").html(h + ":/> " + b + A), 
            k();
        }
        function n() {
            y.append(z), m(null, ""), x.val("");
        }
        function o() {
            m(null, x.val());
        }
        function p(a, b, c) {
            f(), c = c || 0, i(), u = setInterval(function() {
                function d() {
                    n(), j(), b(a);
                }
                x.val().length === a.length ? (clearInterval(u), setTimeout(d, c)) : (x.val(a.substr(0, x.val().length + 1)), 
                o());
            }, 20);
        }
        function q() {
            y.html("");
        }
        function r(a) {
            n();
            var b = 0, c = [ {
                text: "Maze v0.5.3.3",
                time: 100
            }, {
                text: "------------------------",
                time: 100
            }, {
                text: "Total souls trapped " + Math.ceil(666 * Math.random()) + ".",
                time: 100
            }, {
                text: "Searching imprisoned acquaintances...",
                time: 1e3
            }, {
                text: "1 person found.",
                time: 250
            }, {
                text: "Connecting to S0ADEX soul...",
                time: 1200
            }, {
                text: "Connection established. Setting soul-driver controller...",
                time: 100
            }, {
                text: "Loading video library...",
                time: 250
            }, {
                text: "Establishing image connection",
                time: 2500
            }, {
                text: ".......................................................... .................................................................."
            }, {
                text: "[[[ PRESS SPACE BAR ]]]",
                callback: function() {
                    d.show(), b < c.length && nextLine();
                }
            } ];
            "restart_mode" === a && (c.splice(1, 8), c[1].text = "Let's start from the beginning."), 
            function e() {
                var a = c[b];
                p(a.text, a.callback || function() {
                    b < c.length && e();
                }, a.time), b += 1;
            }();
        }
        function s() {
            q(), r("restart_mode");
        }
        function t() {
            c(), x.on("focusout keypress keyup", function(a) {
                switch (a.type) {
                  case "focusout":
                    c();
                    break;

                  case "keyup":
                    var b = String.fromCharCode(a.keyCode).toLowerCase();
                    if (console.log(B), B === !1) switch (b) {
                      case "l":
                      case "r":
                      case "s":
                        d.setDirection(b), o(), n(), i();
                        break;

                      case " ":
                        -1 === d.getCurrStepIndex() && g(function() {
                            e.hide(d.start);
                        });
                    }
                }
            }), r();
        }
        var u, v = a("#terminal"), w = a(".content"), x = v.find(".field"), y = v.find(".lines"), z = a("#terminal-line-template").text(), A = a("#terminal-cursor-text-template").text(), B = !0;
        return {
            init: t,
            show: f,
            hide: g,
            addText: p,
            lock: i,
            unlock: j,
            restart: s
        };
    }(), b.onload = function() {
        e.init(function() {
            d.init(function() {
                c();
            });
        });
    }, b.way = d, b.intro = e, b.terminal = f;
}(jQuery, window);
//# sourceMappingURL=main.min.js.map