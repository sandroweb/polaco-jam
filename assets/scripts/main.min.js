!function(a, b) {
    "use strict";
    function c() {
        e.play();
    }
    var d, e, f, g = "mAzE";
    d = function() {
        function c() {
            return r[w];
        }
        function d() {
            v.play();
        }
        function e() {
            q();
        }
        function g() {
            v.onloadeddata = function() {
                var a = new Howl({
                    urls: [ "assets/sounds/capetatech.mp3" ],
                    autoplay: !0,
                    loop: !0,
                    volume: 0,
                    onload: function() {
                        return s = a, e(), b.backgroundSound = s, s;
                    }
                });
            }, a.post("assets/json/data.json", null, function(b) {
                r = b, a(v).append('<source src="assets/videos/way.mp4" type="video/mp4">');
            });
        }
        function h() {
            clearInterval(t);
        }
        function i() {
            h(), y = 0, w = -1, v.currentTime = 0;
        }
        function j(a) {
            r = a;
        }
        function k(a) {
            c().direction === a ? f.hide(function() {
                w += 1, d();
            }) : f.addText("[[[ Error - Wrong way ]]]", function(a) {
                return f.addText("Restarting ................ 100%", function(a) {
                    return i(), setTimeout(function() {
                        f.restart();
                    }, 800), a;
                }, 2e3), a;
            }, 2e3);
        }
        function l() {
            a(v).addClass("shown");
        }
        function m() {
            var a = c();
            v.currentTime >= a.time && v.paused === !1 && (v.pause(), f.show(function() {
                f.addText(a.description, function(a) {
                    return a;
                });
            }));
        }
        function n() {
            v.pause(), f.addText("TIME IS OVER...", function() {
                console.log("kjshfhkjd fsjh kjs dfkdfsh");
            });
        }
        function o() {
            var a = .6;
            w = 0, d(), t = setInterval(function() {
                x > y ? (y += 1, s.volume(.2 + y * a / x)) : (h(), n());
            }, 1e3);
        }
        function p(a) {
            q = a, v.muted = !1, v.loop = !0, v.ontimeupdate = m, g();
        }
        var q, r, s, t, u = a("#way"), v = u.find("video")[0], w = -1, x = 240, y = 0;
        return {
            init: p,
            setSteps: j,
            setDirection: k,
            getCurrStepIndex: function() {
                return w;
            },
            play: d,
            start: o,
            show: l
        };
    }(), e = function() {
        function b() {
            j.onloadeddata = function() {
                h();
            }, a(j).append('<source src="assets/videos/intro.mp4" type="video/mp4">');
        }
        function c(a) {
            i.fadeOut(300, function() {
                a();
            });
        }
        function d() {
            j.play();
        }
        function e() {
            j.currentTime === j.duration && c(f.init);
        }
        function g(a) {
            h = a, j.muted = !1, j.loop = !1, j.ontimeupdate = e, b();
        }
        var h, i = a("#intro"), j = i.find("video")[0];
        return {
            init: g,
            hide: c,
            play: d
        };
    }(), f = function() {
        function b() {
            return v.is(":visible");
        }
        function c() {
            x.focus();
        }
        function f(a) {
            b() === !1 ? v.fadeIn(300, function() {
                c(), void 0 !== a && a();
            }) : void 0 !== a && a();
        }
        function h(a) {
            v.fadeOut(300, function() {
                a();
            });
        }
        function i() {
            B = !0;
        }
        function j() {
            x.val(""), B = !1;
        }
        function k() {
            w.css({
                "margin-top": -1 * (y.outerHeight() + 20 - v.height())
            });
        }
        function l() {
            return y.find(".line").length - 1;
        }
        function m(a, b) {
            a = a || l(), y.find(".line").eq(a).find(".text-content").html(g + ":/> " + b + A), 
            k();
        }
        function n() {
            y.append(z), m(null, ""), x.val("");
        }
        function o() {
            m(null, x.val());
        }
        function p(a, b, c) {
            f(), c = c || 0, i(), u = setInterval(function() {
                function d() {
                    n(), j(), b(a);
                }
                x.val().length === a.length ? (clearInterval(u), setTimeout(d, c)) : (x.val(a.substr(0, x.val().length + 1)), 
                o());
            }, 20);
        }
        function q() {
            y.html("");
        }
        function r(a) {
            n();
            var b = 0, c = [ {
                text: "Maze v0.5.3.3",
                time: 100
            }, {
                text: "------------------------",
                time: 100
            }, {
                text: "Total souls trapped " + Math.ceil(666 * Math.random()) + ".",
                time: 100
            }, {
                text: "Searching imprisoned acquaintances...",
                time: 1e3
            }, {
                text: "1 person found.",
                time: 250
            }, {
                text: "Connecting to S0ADEX soul...",
                time: 1200
            }, {
                text: "Connection established. Setting soul-driver controller...",
                time: 100
            }, {
                text: "Loading video library...",
                time: 250
            }, {
                text: "Establishing image connection",
                time: 2500
            }, {
                text: ".......................................................... .................................................................."
            }, {
                text: "[[[ PRESS SPACE BAR ]]]",
                callback: function() {
                    d.show(), b < c.length && nextLine();
                }
            } ];
            "restart_mode" === a && (c.splice(1, 8), c[1].text = "Let's start from the beginning."), 
            function e() {
                var a = c[b];
                p(a.text, a.callback || function() {
                    b < c.length && e();
                }, a.time), b += 1;
            }();
        }
        function s() {
            q(), r("restart_mode");
        }
        function t() {
            c(), x.on("focusout keypress keyup", function(a) {
                switch (a.type) {
                  case "focusout":
                    c();
                    break;

                  case "keyup":
                    var b = String.fromCharCode(a.keyCode).toLowerCase();
                    if (console.log(B), B === !1) switch (b) {
                      case "l":
                      case "r":
                      case "s":
                        d.setDirection(b), o(), n(), i();
                        break;

                      case " ":
                        -1 === d.getCurrStepIndex() && h(function() {
                            e.hide(d.start);
                        });
                    }
                }
            }), r();
        }
        var u, v = a("#terminal"), w = a(".content"), x = v.find(".field"), y = v.find(".lines"), z = a("#terminal-line-template").text(), A = a("#terminal-cursor-text-template").text(), B = !0;
        return {
            init: t,
            show: f,
            hide: h,
            addText: p,
            lock: i,
            unlock: j,
            restart: s
        };
    }(), b.onload = function() {
        e.init(function() {
            d.init(function() {
                c();
            });
        });
    }, b.way = d, b.intro = e, b.terminal = f;
}(jQuery, window);
//# sourceMappingURL=main.min.js.map